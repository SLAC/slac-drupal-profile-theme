{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{% set classes = [
  node.isPromoted() ? 'is-promoted',
  node.isSticky() ? 'is-sticky',
  not node.isPublished() ? 'is-unpublished',
] %}

{% set attributes = attributes.addClass(classes) %}

{% set is_past_event = node.isPastEvent() %}

{% set admin_info %}
{{ region_status }}
{% endset %}

{% set show_admin_info = false %}

{% if admin_info|striptags('<drupal-render-placeholder>')|trim %}
  {% set show_admin_info = true %}
{% endif %}

{#
/**
 * Format of date field as defined in the view_mode is standard HTMl format,
 * for example "2022-08-05T13:59:47-0700". Extract event start and end dates.
 * Assumes that the event field contains both a start_date and end_date, note
 * that both are required in the editing of an event and date order is
 * enforced.
 */
#}

{% set event_start_date = content.field_smart_date[0]["#value"] %}
{% set event_end_date = content.field_smart_date[0]["#end_value"] %}
{% set all_day_event_text = content.field_smart_date[0]["end"] is null ? content.field_smart_date[0]["start"]["#text"]["time"] : FALSE %}

{#
/**
 * Calculate the event start and end dates "day of the years" and compare to determine
 * if the event is a single day or multiday event. To account for the edge case of an
 * event spanning a year boundary (Dec. 31 - Jan. 1), check the year first.
 * Multiday event is signalled to the theming layer by passing null for end_date value.
 */
#}
{% set multiyear_event = event_start_date|date('y')|number_format != event_end_date|date('y')|number_format  %}
{% set multiday_event = multiyear_event or event_start_date|date('z')|number_format < event_end_date|date('z')|number_format %}

{#
/**
 * If no override, compose the date string using different formats for single- and multiday
 * events. Display the "am" and "pm" for each time in case of event spanning across noon or
 * midnight. Timezone value is passed to template from view mode integral to date range value.
 */
#}

{% set datetime_composed %}
  {% if all_day_event_text %}
    {{- event_start_date|date("l, F j, Y") }}&nbsp;·&nbsp;{{ all_day_event_text }}
  {% elseif multiday_event == false %}
    {{ event_start_date|date("l, F j, Y") }}
    ·
    {{ event_start_date|date("g:i a")|replace({"am":"a.m.", "pm":"p.m."}) }}–{{ event_end_date|date("g:i a")|replace({"am":"a.m.", "pm":"p.m."}) }}&nbsp;&nbsp;{{ event_start_date|date("T")|replace({"PST":"PT","PDT":"PT"}) -}}
  {% else %}
    {{- event_start_date|date("l, F j, Y") }}&nbsp;&nbsp;–&nbsp;&nbsp;{{ event_end_date|date("l, F j, Y") }}
  {% endif %}
{% endset %}

{% set card_media %}
  {% if content.field_image|field_value is not empty %}
    {{ content.field_image|field_value }}
  {% elseif site_setting_entity_by_name('event_default_motif_image') %}
    {{ drupal_entity('media', site_setting_entity_by_name('event_default_motif_image').field_motif_image.target_id, 'card_image_only') }}
  {% endif %}
{% endset %}

{% set event_content %}
  {{ content.field_video }}
  {{ content.field_external_link }}
  {{ content.field_body }}
  {{ content.field_paragraphs }}
{% endset %}

{% set speaker_info %}
  {{- content.field_name|field_value|render|striptags('<strong><em><a>')|trim|raw-}}
  {%- if content.field_affiliation|field_value -%}, {{ content.field_affiliation|field_value|render|striptags('<strong><em><a>')|trim|raw -}}{%- endif -%}
{% endset %}

{% set speaker_fields %}
  {{- content.field_name -}}
  {{- content.field_person_image -}}
  {{- content.field_long_text -}}
{% endset %}

{% if speaker_fields %}
  {% set speaker_content %}
    {% include '@components/wysiwyg/wysiwyg.twig' with {
      'content': speaker_fields
    } %}
  {% endset %}
{% endif %}

{% set event_contact %}{% apply spaceless %}
  {% if content.field_contact_name|field_value %}{{- content.field_contact_name|render|striptags('<strong><em><a>')|trim|raw -}}<br>{% endif %}
  {% if content.field_email|field_value %}{{- content.field_email|field_value -}}<br>{% endif %}
  {% if content.field_text|field_value %}{{- content.field_text|field_value -}}{% endif %}
{% endapply %}{% endset %}

{% set upcoming_events %}{% apply spaceless %}
  {{ drupal_view('pre_filtered_content_lists', 'embed_events_upcoming_list3') }}
{% endapply %}{% endset %}

{% if upcoming_events %}
  {% set related_content %}
    {% include '@layouts/section/section.twig' with {
      'section_kicker': "In case you're interested"|t,
      'section_title': 'Upcoming events'|t,
      'section_content': upcoming_events,
      'has_constrain': true,
      'modifier_classes': 'l-section--dark l-section--purple-black'
    } %}
  {% endset %}
{% endif %}

<div class="c-main__meta">
  {{ drupal_block('system_breadcrumb_block') }}
  {{ drupal_block('share_this_page_block') }}
</div>

{% include '@templates/event-detail/event-detail.twig' with {
  'show_admin_info': show_admin_info,
  'admin_info': admin_info,
  'image': card_media,
  'start_date': {
    'month': event_start_date|date('M'),
    'day': event_start_date|date('j')
  },
  'end_date': multiday_event == false ? null : {
    'month': event_end_date|date('M'),
    'day': event_end_date|date('j')
  },
  'event_type': content.field_type|field_value,
  'event_title': label,
  'speaker_info': speaker_info,
  'calendar_link_text': datetime_composed,
  'add_to_cal_links': content.field_smart_date[0]['addtocal'],
  'map_link_text': content.field_location|field_value,
  'map_link_url': content.field_location_link|field_value,
  'zoom_url': content.field_conference_link|field_value ? content.field_conference_link.0['#url'],
  'zoom_text': content.field_conference_link|field_value ? content.field_conference_link.0['#title'],
  'event_content': event_content,
  'speaker_content': speaker_content,
  'event_sponsor': content.field_sponsor|render|striptags('<strong><em><a>')|trim,
  'event_audience': content.field_audience,
  'event_contact': event_contact,
  'tags': content.field_tags,
  'visiting': node.field_boolean.value == '1' ? drupal_entity('block', 'event_visitor_details'),
  'map_iframe': node.field_boolean.value == '1' ? content.field_site_setting : false,
} %}

{% set catch_cache = content|render %}
